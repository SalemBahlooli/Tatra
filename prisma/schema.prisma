generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  imageUrl       String
  externalUserId String   @unique
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  following      Follow[] @relation("Following")
  followedBy     Follow[] @relation("FollowedBy")
  blocking       Block[]  @relation("Blocking")
  blockedBy      Block[]  @relation("BlockedBy")
  moderators  Moderator[]  // Relation to Moderator
  stream         Stream?
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String
  blocker   User   @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Stream {
  id                  String   @id @default(uuid())
  name                String
  thumbnailUrl        String?
  ingressId           String?  @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  viewCount           Int      @default(0)

  moderators  Moderator[]  // Relation to Moderator

  categoryId          String?   @db.Uuid
  category            Category? @relation(fields: [categoryId], references: [id])
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ingressId])
  @@index([categoryId])
  
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   
  image     String?
  slug      String?  @unique @default(cuid())
  createdAt DateTime @default(now())
  
  streams   Stream[] // Virtual relation listing all streams under this category
}

model Moderator {
  id        String   @id @default(uuid())
  userId    String
  streamId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  stream    Stream   @relation(fields: [streamId], references: [id],onDelete: Cascade)

  @@unique([userId, streamId])
   @@index([userId])
  @@index([streamId]) // Ensure a user can only be a moderator of the same stream once
}
